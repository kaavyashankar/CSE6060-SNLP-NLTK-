{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import nltk"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "semtence=[(\"the\",\"DT\"),(\"little\",\"JJ\"),(\"yellow\",\"JJ\"),(\"dog\",\"NN\"),(\"barked\",\"VBD\"),(\"at\",\"IN\"),(\"the\",\"DT\"),(\"white\",\"JJ\"),(\"dog\",\"NN\")]\n",
    "grammar=\"NP:{<DT>?<JJ>*<NN>}\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "cp=nltk.RegexpParser(grammar)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(S\n",
      "  (NP the/DT little/JJ yellow/JJ dog/NN)\n",
      "  barked/VBD\n",
      "  at/IN\n",
      "  (NP the/DT white/JJ dog/NN))\n"
     ]
    }
   ],
   "source": [
    "result=cp.parse(semtence)\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "result.draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "text=\" parsing in NLP is the process of determining the syntactic structure of a text by analyzing its constituent words based on an underlying grammar (of the language). \""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(S\n",
      "  (NP  /NN)\n",
      "  p/VBZ\n",
      "  (NP a/DT r/NN)\n",
      "  (NP s/NN)\n",
      "  (NP i/NN)\n",
      "  n/VBP\n",
      "  (NP g/NN)\n",
      "  (NP  /NN)\n",
      "  (NP i/NN)\n",
      "  n/VBP\n",
      "   /JJ\n",
      "  N/NNP\n",
      "  L/NNP\n",
      "  P/NNP\n",
      "   /NNP\n",
      "  (NP i/NN)\n",
      "  s/VBP\n",
      "  (NP  /JJ t/NN)\n",
      "  (NP h/NN)\n",
      "  (NP e/NN)\n",
      "   /NNP\n",
      "  (NP p/NN)\n",
      "  (NP r/NN)\n",
      "  o/IN\n",
      "  (NP c/JJ e/NN)\n",
      "  (NP s/NN)\n",
      "  (NP s/NN)\n",
      "   /NNP\n",
      "  o/VBZ\n",
      "  f/JJ\n",
      "   /NNP\n",
      "  (NP d/NN)\n",
      "  (NP e/NN)\n",
      "  (NP t/NN)\n",
      "  (NP e/NN)\n",
      "  (NP r/NN)\n",
      "  (NP m/NN)\n",
      "  (NP i/NN)\n",
      "  n/VBP\n",
      "  (NP i/NN)\n",
      "  n/VBP\n",
      "  (NP g/NN)\n",
      "   /NNP\n",
      "  (NP t/NN)\n",
      "  (NP h/NN)\n",
      "  (NP e/NN)\n",
      "   /NNP\n",
      "  (NP s/NN)\n",
      "  (NP y/NN)\n",
      "  n/JJ\n",
      "  t/VBZ\n",
      "  (NP a/DT c/JJ t/NN)\n",
      "  (NP i/NN)\n",
      "  c/VBP\n",
      "  (NP  /JJ s/NN)\n",
      "  (NP t/NN)\n",
      "  (NP r/NN)\n",
      "  (NP u/JJ c/NN)\n",
      "  (NP t/NN)\n",
      "  (NP u/JJ r/NN)\n",
      "  (NP e/NN)\n",
      "   /NNP\n",
      "  o/VBZ\n",
      "  f/JJ\n",
      "   /IN\n",
      "  (NP a/DT  /JJ t/NN)\n",
      "  (NP e/NN)\n",
      "  x/NNP\n",
      "  (NP t/NN)\n",
      "   /NNP\n",
      "  (NP b/NN)\n",
      "  (NP y/NN)\n",
      "   /VBZ\n",
      "  (NP a/DT n/NN)\n",
      "  (NP a/DT l/NN)\n",
      "  (NP y/NN)\n",
      "  (NP z/NN)\n",
      "  (NP i/NN)\n",
      "  n/VBP\n",
      "  (NP g/NN)\n",
      "  (NP  /NN)\n",
      "  (NP i/NN)\n",
      "  t/VBP\n",
      "  (NP s/NN)\n",
      "   /NNP\n",
      "  c/VBZ\n",
      "  (NP o/JJ n/JJ s/NN)\n",
      "  (NP t/NN)\n",
      "  (NP i/NN)\n",
      "  t/VBP\n",
      "  (NP u/JJ e/NN)\n",
      "  (NP n/JJ t/NN)\n",
      "   /NNP\n",
      "  (NP w/NN)\n",
      "  (NP o/NN)\n",
      "  (NP r/NN)\n",
      "  (NP d/NN)\n",
      "  (NP s/NN)\n",
      "   /NNP\n",
      "  b/VBZ\n",
      "  (NP a/DT s/JJ e/NN)\n",
      "  (NP d/NN)\n",
      "   /NNP\n",
      "  o/VBZ\n",
      "  n/JJ\n",
      "   /IN\n",
      "  (NP a/DT n/JJ  /NN)\n",
      "  (NP u/JJ n/JJ d/NN)\n",
      "  (NP e/NN)\n",
      "  (NP r/NN)\n",
      "  (NP l/NN)\n",
      "  (NP y/NN)\n",
      "  (NP i/NN)\n",
      "  n/VBP\n",
      "  (NP g/NN)\n",
      "  (NP  /NN)\n",
      "  (NP g/NN)\n",
      "  r/VBZ\n",
      "  (NP a/DT m/NN)\n",
      "  (NP m/NN)\n",
      "  (NP a/DT r/NN)\n",
      "  (NP  /NN)\n",
      "  (/(\n",
      "  (NP o/JJ f/NN)\n",
      "   /NNP\n",
      "  (NP t/NN)\n",
      "  (NP h/NN)\n",
      "  (NP e/NN)\n",
      "   /NNP\n",
      "  l/VBZ\n",
      "  (NP a/DT n/JJ g/NN)\n",
      "  u/IN\n",
      "  (NP a/DT g/JJ e/NN)\n",
      "  )/)\n",
      "  ./.\n",
      "  (NP  /NN))\n"
     ]
    }
   ],
   "source": [
    "chunks=cp.parse(nltk.pos_tag(text))\n",
    "print(chunks)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "chunks.draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
